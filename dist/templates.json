[{"name":"datatable","type":"BODY_COMPONENT","allowedTypes":[],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    gql\n  } = window;\n  const {\n    GetAll,\n    Query,\n    env\n  } = B;\n  const {\n    Table,\n    TableCell,\n    TableHead,\n    TableRow,\n    TableBody,\n    Checkbox\n  } = window.MaterialUI.Core;\n  const {\n    DataGrid,\n    GridToolbar\n  } = window.MaterialUI.Datagrid;\n  const {\n    XGrid\n  } = window.MaterialUI.XGrid;\n  const isDev = env === 'dev';\n  const GET_USERINFO = gql`\n      query Items {\n        allUser {\n          results {\n            id\n            name\n            userskills {\n              status\n              isMastered\n              skill {\n                id\n                name\n                subskills {\n                  id\n                  name\n                  status\n                }\n              }\n            }\n            userteamjobs {\n              teamjob {\n                id\n                name\n              }\n            }\n          }\n        }\n        allSkills {\n          results {\n            id\n            name\n          }\n        }\n      }\n    `; // function columns(skillsResults) {\n  //   return (\n  //     { field: 'name', headerName: 'name', width: 70 },\n  //     { field: 'Team/Jobs', headerName: 'Team/Jobs', width: 130 },\n  //     array.map(skill => ({\n  //       field: skill.name,\n  //       headerName: skill.name,\n  //       width: 130,\n  //     }))\n  //   );\n  // }\n\n  const columns = [{\n    field: 'id',\n    headerName: 'ID',\n    width: 70\n  }, {\n    field: 'name',\n    headerName: 'name',\n    width: 200\n  }, {\n    field: 'teamjobs',\n    headerName: 'Team/Jobs',\n    width: 130\n  }];\n  const row = [];\n\n  function Skill({\n    value\n  }) {\n    if (value) return <div>{value} S</div>;\n    return <div>No skill</div>;\n  }\n\n  function table() {\n    return <Query fetchPolicy=\"network-only\" query={GET_USERINFO} pollInterval={1000}>\n          {({\n        loading,\n        error,\n        data\n      }) => {\n        if (loading) return 'Loading...';\n        if (error) return `Error! ${error.message}`;\n        const {\n          allUser: {\n            results: userResults\n          },\n          allSkills: {\n            results: skillsResults\n          }\n        } = data;\n        skillsResults.forEach(element => {\n          columns.push({\n            field: element.id,\n            headerName: element.name,\n            renderCell: params => <Skill value={params.value} />\n          });\n        });\n        const ar = [];\n        skillsResults.forEach(element => {\n          ar.push(element.id);\n        });\n        userResults.forEach(element => {\n          const rowObject = {\n            id: element.id,\n            name: element.name,\n            teamjobs: element.userteamjobs.map(team => team.teamjob.name)\n          };\n          ar.forEach(id => {\n            const usk = element.userskills.find(el => el.skill.id == id);\n            rowObject[id] = usk;\n          });\n          console.log('Row object', rowObject);\n          row.push(rowObject);\n        });\n        console.log('Row', row);\n        return <div style={{\n          height: 400,\n          width: '100%'\n        }}>\n                <DataGrid rows={row} columns={columns} pageSize={5} components={{\n            Toolbar: GridToolbar\n          }} />\n              </div>;\n      }}\n        </Query>;\n  }\n\n  return isDev ? <div className={classes.placeholder}>User skills</div> : table();\n})()","styles":"B => theme => {\n  const style = new B.Styling(theme);\n  return {\n    root: {\n      textAlign: 'left'\n    },\n    placeholder: {\n      padding: '10px'\n    }\n  };\n}","functions":[],"triggers":[]},{"name":"HelloWorld","type":"TEXT","icon":"TitleIcon","orientation":"HORIZONTAL","allowedTypes":[],"jsx":"(() => {\n  const Tag = {\n    Title1: 'h1',\n    Title2: 'h2',\n    Title3: 'h3',\n    Title4: 'h4',\n    Title5: 'h5',\n    Title6: 'h6',\n    Body1: 'p',\n    Body2: 'p'\n  }[options.type || 'Title1'];\n  return <Tag className={classes.root}>{options.content}</Tag>;\n})()","styles":"B => t => {\n  const style = new B.Styling(t);\n  return {\n    root: {\n      boxSizing: 'border-box',\n      position: 'relative',\n      width: '100%',\n      margin: 0,\n      paddingTop: ({\n        options: {\n          padding\n        }\n      }) => style.getSpacing(padding[0], 'Desktop'),\n      paddingRight: ({\n        options: {\n          padding\n        }\n      }) => style.getSpacing(padding[1], 'Desktop'),\n      paddingBottom: ({\n        options: {\n          padding\n        }\n      }) => style.getSpacing(padding[2], 'Desktop'),\n      paddingLeft: ({\n        options: {\n          padding\n        }\n      }) => style.getSpacing(padding[3], 'Desktop'),\n      fontFamily: ({\n        options: {\n          type\n        }\n      }) => style.getFontFamily(type),\n      fontSize: ({\n        options: {\n          type\n        }\n      }) => style.getFontSize(type),\n      textTransform: ({\n        options: {\n          type\n        }\n      }) => style.getTextTransform(type),\n      fontWeight: ({\n        options: {\n          type\n        }\n      }) => style.getFontWeight(type),\n      letterSpacing: ({\n        options: {\n          type\n        }\n      }) => style.getLetterSpacing(type),\n      textAlign: ({\n        options: {\n          align\n        }\n      }) => align,\n      color: ({\n        options: {\n          color\n        }\n      }) => style.getColor(color)\n    }\n  };\n}","functions":[],"triggers":[]},{"name":"skillsMatrix","type":"BODY_COMPONENT","allowedTypes":[],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    gql,\n    useQuery\n  } = window;\n  const {\n    modelId,\n    filter\n  } = options;\n  const {\n    Query,\n    GetAll\n  } = B;\n  const {\n    Table,\n    TableCell,\n    TableHead,\n    TableRow,\n    TableBody,\n    Checkbox\n  } = window.MaterialUI.Core; // const { XGrid } = window.MaterialUI.XGrid;\n  // const [filterIdList, setFilterIdList] = useState(null);\n  // const [userResults, setUserResults] = useState(null);\n  // setFilterIdList([1, 4]);\n\n  const GET_USERINFO = gql`\n      query Items {\n        allUser(where: { userskills: { status: { eq: \"Mastered\" } } }) {\n          results {\n            name\n            userskills {\n              skills {\n                id\n                name\n                subskills {\n                  name\n                  status\n                }\n              }\n            }\n            userteamjobs {\n              teamjob {\n                name\n              }\n            }\n          }\n        }\n        allSkills {\n          results {\n            id\n            name\n          }\n        }\n      }\n    `;\n  const GET_FILTER = gql`\n      query Items {\n        allUser(\n          where: { userskills: { skills: { name: { eq: \"schaken\" } } } }\n        ) {\n          results {\n            name\n            userskills {\n              skills {\n                name\n                subskills {\n                  name\n                  status\n                }\n              }\n            }\n            userteamjobs {\n              teamjob {\n                name\n              }\n            }\n          }\n        }\n        allSkills {\n          results {\n            name\n          }\n        }\n      }\n    `;\n\n  function User(props) {\n    const {\n      item,\n      item: {\n        name,\n        userskills: {\n          skill: {\n            Name: skillName,\n            subskills: {\n              name: subskillName,\n              status: subskilStatus\n            }\n          }\n        },\n        userteamjobs: {\n          teamjob: {\n            name: teamjobName\n          }\n        }\n      }\n    } = props;\n    return <div className={classes.root}>\n          <table>\n            <tr>\n              <th>Filter</th>\n              <th>All</th>\n              <th key={name}>\n                <input type=\"checkbox\" checked={false} />\n              </th>\n            </tr>\n            <tr>\n              <th>Naam</th>\n              <th>Team/Job</th>\n              <th key={teamjob}>{teamjob}</th>\n            </tr>\n            <tr>\n              {\n            /* Get from User */\n          }\n              <td key={name}>{name}</td>\n              {\n            /* Get from Team/Job */\n          }\n              <td key={teamjob}>{teamjob}</td>\n              {\n            /* Get from UserSkill */\n          }\n              <td key={teamjob}>\n                <input type=\"checkbox\" checked={true} />\n              </td>\n            </tr>\n          </table>\n        </div>;\n  }\n\n  function Test(props) {\n    const {\n      item,\n      item: {\n        name\n      }\n    } = props;\n    return <div className={classes.root}>\n          <table>\n            <tr>\n              <th>Filter</th>\n              <th>All</th>\n              <th key={name}>\n                <input type=\"checkbox\" checked={false} />\n              </th>\n            </tr>\n            <tr>\n              <th>Naam</th>\n              <th>Team/Job</th>\n              <th key={name}>{name}</th>\n            </tr>\n            <tr>\n              {\n            /* Get from User */\n          }\n              <td key={name}>{name}</td>\n              {\n            /* Get from Team/Job */\n          }\n              <td key={name}>{name}</td>\n              {\n            /* Get from UserSkill */\n          }\n              <td key={name}>\n                <input type=\"checkbox\" checked={true} />\n              </td>\n            </tr>\n          </table>\n        </div>;\n  }\n\n  function skills() {\n    return <div className={classes.root}>\n          <Query fetchPolicy=\"network-only\" query={GET_SKILLS}>\n            {({\n          loading,\n          error,\n          data\n        }) => {\n          if (loading) return 'Loading...';\n          if (error) return `Error! ${error.message}`;\n          const {\n            allSkills: {\n              results\n            }\n          } = data;\n          console.log(results); //return results.map(item => <Test key={item.id} item={results} />);\n\n          const list = results.map(result => <TableCell>{result.name}</TableCell>);\n          return list;\n        }}\n          </Query>\n        </div>;\n  }\n\n  function userlist() {\n    return <div className={classes.root}>\n          <Query fetchPolicy=\"network-only\" query={GET_USERINFO}>\n            {({\n          loading,\n          error,\n          data\n        }) => {\n          if (loading) return 'Loading...';\n          if (error) return `Error! ${error.message}`;\n          const {\n            allUser: {\n              results: userResults\n            },\n            allSkills: {\n              results: skillsResults\n            }\n          } = data;\n          console.log(results); //return results.map(item => <Test key={item.id} item={results} />);\n          //const list = skills.map(result => <th>{result.name}</th>);\n\n          const ulist = results.map(result => <TableRow>\n                  <TableCell>{result.name}</TableCell>\n                  <TableCell>\n                    {result.userteamjobs.map(item => {\n                return item.teamjob.name;\n              })}\n                  </TableCell>\n                  {\n              /* {result.userteamjobs.map(item => (\n               <TableCell>{item.teamjob.name}</TableCell>\n              ))} */\n            }\n                  <TableCell>\n                    {result.userskills.map(skil => {\n                return skil.skills.name;\n              })}\n                  </TableCell>\n                  {\n              /* {result.userskills.map(skil => (\n               <TableCell>{skil.skills.name}</TableCell>\n              ))} */\n            }\n                </TableRow>);\n          const qlist = data.allUser.results.map(q => {\n            console.log(q);\n          });\n          return <Table className={classes.table}>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Naam</TableCell>\n                      <TableCell>Team/Job</TableCell>\n                      {skills()}\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>{ulist}</TableBody>\n                  {qlist}\n                </Table>;\n        }}\n          </Query>\n        </div>;\n  }\n\n  function Fcfilter(skill) {\n    console.log(skill);\n    console.log(skillId);\n    skill = parseInt(skill);\n\n    if (skillId.includes(skill)) {\n      for (var i = 0; i < skillId.length; i++) {\n        if (skillId[i] === skill) {\n          skillId.splice(i, 1);\n        }\n      }\n    } else {\n      skillId.push(skill);\n    }\n\n    console.log(skillId);\n  }\n\n  function spliceArray(array) {\n    if (array.length <= 0) {} else {\n      //var str = new RegExp(array.join('||'));\n      var str = array.join('||');\n      var text = 1;\n      console.log(Number(str));\n    }\n  }\n\n  function table() {\n    return <div className={classes.root}>\n          <Query fetchPolicy=\"network-only\" query={GET_USERINFO} pollInterval={1000}>\n            {({\n          loading,\n          error,\n          data\n        }) => {\n          if (loading) return 'Loading...';\n          if (error) return `Error! ${error.message}`;\n          console.log(data);\n          const tablehead = <TableHead>\n                  <TableRow>\n                    <TableCell>Filter</TableCell>\n                    <TableCell>All</TableCell>\n                    {data.allSkills.results.map(skill => <TableCell>\n                        <Checkbox onChange={event => Fcfilter(event.target.value)} //onChange={() => refetch()}\n                value={skill.id} />\n                      </TableCell>)}\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>Naam</TableCell>\n                    <TableCell>Team/Job</TableCell>\n                    {data.allSkills.results.map(skill => <TableCell>{skill.name}</TableCell>)}\n                  </TableRow>\n                </TableHead>;\n          const users = <TableBody>\n                  {data.allUser.results // .filter(user => {\n            //   const userSkillId = user.userskills.map(\n            //     skill => skill.skills.id,\n            //   );\n            //   let counter = 0;\n            //   skillId.forEach(id => {\n            //     if (userSkillId.includes(id)) counter++;\n            //   });\n            //   console.log(skillId.length == counter);\n            //   return skillId.length == counter;\n            // })\n            .map(user => <TableRow>\n                        <TableCell>{user.name}</TableCell>\n                        {\n                /* {user.userteamjobs.map(team => {\n                <TableCell>{team.teamjob.name}</TableCell>;\n                })} */\n              }\n                        <TableCell>\n                          {user.userteamjobs.map(team => {\n                  return team.teamjob.name;\n                })}\n                        </TableCell>\n                        {\n                /* {user.userskills.map(skills => (\n                <TableCell>{skills.skills.name}</TableCell>\n                ))} */\n              }\n                        {data.allSkills.results.map(skill => {\n                //console.log(user.userskills);\n                const us = [];\n                user.userskills.map(uskills => {\n                  // console.log(uskills.skills.id);\n                  // console.log(uskills.skills.name);\n                  us.push(uskills.skills.name); // const isInArray = skill.name.includes(\n                  //   uskills.skills.name,\n                  // );\n                  //return isInArray;\n                  // console.log(isInArray);\n                });\n\n                for (let j = 0; j < us.length; j++) {\n                  if (skill.name === us[j]) {\n                    return <TableCell>\n                                  <Checkbox disabled checked />\n                                </TableCell>;\n                  }\n                }\n\n                return <TableCell>\n                              <Checkbox disabled />\n                            </TableCell>; //console.log(array);\n                //const cod = skill.name;\n                //const found = skill.name.includes(us);\n                //console.log(skill.name);\n                // const isInArray =\n                //   skill.name.indexOf(user.userskills.skills.name) > -1;\n                //console.log(skill);\n                //console.log(user.userskills);\n                //console.log(arrayin);\n                //console.log(found);\n                //console.log(cod);\n                // if (true) {\n                //   return (\n                //     <TableCell>\n                //       <Checkbox disabled checked />\n                //     </TableCell>\n                //   );\n                // }\n                // return (\n                //   <TableCell>\n                //     <Checkbox disabled />\n                //   </TableCell>\n                // );\n                // <TableCell>{skill.name}</TableCell>;\n              })}\n                      </TableRow>)}\n                </TableBody>;\n          return <Table className={classes.table}>\n                  {tablehead}\n                  {users}\n\n                  {\n              /* <TableHead>\n               <TableRow>\n                 <TableCell>Naam</TableCell>\n                 <TableCell>Team/Job</TableCell>\n                 {skills()}\n               </TableRow>\n              </TableHead>\n              <TableBody>{ulist}</TableBody> */\n            }\n                  {\n              /* {qlist} */\n            }\n                </Table>;\n        }}\n          </Query>\n        </div>;\n  }\n\n  function matrix() {\n    const {\n      data,\n      loading,\n      error\n    } = useQuery(GET_USERINFO);\n    if (loading) return 'Loading...';\n    if (error) return `Error! ${error.message}`;\n    const tablehead = <TableHead>\n          <TableRow>\n            <TableCell>Filter</TableCell>\n            <TableCell>All</TableCell>\n            {data.allSkills.results.map(skill => <TableCell>\n                <Checkbox onChange={event => Fcfilter(event.target.value)} value={skill.id} />\n              </TableCell>)}\n          </TableRow>\n          <TableRow>\n            <TableCell>Naam</TableCell>\n            <TableCell>Team/Job</TableCell>\n            {data.allSkills.results.map(skill => <TableCell>{skill.name}</TableCell>)}\n          </TableRow>\n        </TableHead>;\n    const users = <TableBody>\n          {data.allUser.results.filter(user => {\n        const userSkillId = user.userskills.map(skill => skill.skills.id);\n        let counter = 0;\n        skillId.forEach(id => {\n          if (userSkillId.includes(id)) counter++;\n        });\n        console.log(skillId.length == counter);\n        return skillId.length == counter;\n      }).map(user => <TableRow>\n                <TableCell>{user.name}</TableCell>\n                <TableCell>\n                  {user.userteamjobs.map(team => {\n            return team.teamjob.name;\n          })}\n                </TableCell>\n                {data.allSkills.results.map(skill => {\n          const us = [];\n          user.userskills.map(uskills => {\n            us.push(uskills.skills.name);\n          });\n\n          for (let j = 0; j < us.length; j++) {\n            if (skill.name === us[j]) {\n              return <TableCell>\n                          <Checkbox disabled checked />\n                        </TableCell>;\n            }\n          }\n\n          return <TableCell>\n                      <Checkbox disabled />\n                    </TableCell>;\n        })}\n              </TableRow>)}\n        </TableBody>;\n    return <Table className={classes.table}>\n          {tablehead}\n          {users}\n        </Table>;\n  }\n\n  function grid() {\n    const {\n      data\n    } = GET_USERINFO;\n    return <div>\n          <XGrid {...data} />\n        </div>;\n  }\n\n  return table(); // <div>\n  //   <GetAll modelId={modelId} filter={filter} skip={0} take={15}>\n  //     {({ loading, error, data, refetch }) => {\n  //       if (loading) {\n  //         return <span>Loading...</span>;\n  //       }\n  //       if (error) {\n  //         return <span>Something went wrong: {error.message} :(</span>;\n  //       }\n  //       const { totalCount, results } = data;\n  //       return (\n  //         <div className={classes.root}>\n  //           <table>\n  //             <tr>\n  //               <th>Filter</th>\n  //               <th>All</th>\n  //               {results.map(item => (\n  //                 <th key={item.id}>\n  //                   <input type=\"checkbox\" checked={false} />\n  //                 </th>\n  //               ))}\n  //             </tr>\n  //             <tr>\n  //               <th>Naam</th>\n  //               <th>Team/Job</th>\n  //               {results.map(item => (\n  //                 <th key={item.id}>{item.name}</th>\n  //               ))}\n  //             </tr>\n  //             {results.map(item => (\n  //               <tr>\n  //                 {/* Get from User */}\n  //                 <td key={item.id}>{item.name}</td>\n  //                 {/* Get from Team/Job */}\n  //                 <td key={item.id}>Functienamen hier!</td>\n  //                 {/* Get from UserSkill */}\n  //                 {results.map(item => (\n  //                   <td key={item.id}>\n  //                     <input type=\"checkbox\" checked={true} />\n  //                   </td>\n  //                 ))}\n  //               </tr>\n  //             ))}\n  //           </table>\n  //         </div>\n  //       );\n  //     }}\n  //   </GetAll>\n  // </div>\n})()","styles":"B => theme => {\n  const style = new B.Styling(theme);\n  return {\n    root: {\n      textAlign: 'left'\n    }\n  };\n}","functions":[],"triggers":[]}]
